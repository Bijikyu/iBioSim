/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package lpn.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DOT = 1;
  /** RegularExpression Id. */
  int ATACS = 2;
  /** RegularExpression Id. */
  int END = 3;
  /** RegularExpression Id. */
  int INPUTS = 4;
  /** RegularExpression Id. */
  int INIT_STATE = 5;
  /** RegularExpression Id. */
  int DUMMYS = 6;
  /** RegularExpression Id. */
  int FAILTRANS = 7;
  /** RegularExpression Id. */
  int VARIABLES = 8;
  /** RegularExpression Id. */
  int INTEGERS = 9;
  /** RegularExpression Id. */
  int NONINPS = 10;
  /** RegularExpression Id. */
  int KEEPS = 11;
  /** RegularExpression Id. */
  int ABSTRACTS = 12;
  /** RegularExpression Id. */
  int CONTINUOUS = 13;
  /** RegularExpression Id. */
  int RATES = 14;
  /** RegularExpression Id. */
  int INITRATES = 15;
  /** RegularExpression Id. */
  int INITVALS = 16;
  /** RegularExpression Id. */
  int INITINTS = 17;
  /** RegularExpression Id. */
  int INVARIANTS = 18;
  /** RegularExpression Id. */
  int ENABLINGS = 19;
  /** RegularExpression Id. */
  int ASSIGNS = 20;
  /** RegularExpression Id. */
  int TRANS_RATES = 21;
  /** RegularExpression Id. */
  int RATE_ASSIGNS = 22;
  /** RegularExpression Id. */
  int INT_ASSIGNS = 23;
  /** RegularExpression Id. */
  int DELAY_ASSIGNS = 24;
  /** RegularExpression Id. */
  int PRIORITY_ASSIGNS = 25;
  /** RegularExpression Id. */
  int BOOL_ASSIGNS = 26;
  /** RegularExpression Id. */
  int OUTPUTS = 27;
  /** RegularExpression Id. */
  int INTERNAL = 28;
  /** RegularExpression Id. */
  int GRAPH = 29;
  /** RegularExpression Id. */
  int PROPERTY = 30;
  /** RegularExpression Id. */
  int MARKING = 31;
  /** RegularExpression Id. */
  int NAME = 32;
  /** RegularExpression Id. */
  int UNIFORM = 33;
  /** RegularExpression Id. */
  int NORMAL = 34;
  /** RegularExpression Id. */
  int EXPONENTIAL = 35;
  /** RegularExpression Id. */
  int GAMMA = 36;
  /** RegularExpression Id. */
  int LOGNORMAL = 37;
  /** RegularExpression Id. */
  int CHISQ = 38;
  /** RegularExpression Id. */
  int LAPLACE = 39;
  /** RegularExpression Id. */
  int CAUCHY = 40;
  /** RegularExpression Id. */
  int RAYLEIGH = 41;
  /** RegularExpression Id. */
  int POISSON = 42;
  /** RegularExpression Id. */
  int BINOMIAL = 43;
  /** RegularExpression Id. */
  int BERNOULLI = 44;
  /** RegularExpression Id. */
  int BITNOT = 45;
  /** RegularExpression Id. */
  int BITOR = 46;
  /** RegularExpression Id. */
  int BITAND = 47;
  /** RegularExpression Id. */
  int BITXOR = 48;
  /** RegularExpression Id. */
  int INT = 49;
  /** RegularExpression Id. */
  int BOOL = 50;
  /** RegularExpression Id. */
  int BIT = 51;
  /** RegularExpression Id. */
  int RATE = 52;
  /** RegularExpression Id. */
  int VERIFY = 53;
  /** RegularExpression Id. */
  int SEARCH = 54;
  /** RegularExpression Id. */
  int ASSIGN = 55;
  /** RegularExpression Id. */
  int IMPLIC = 56;
  /** RegularExpression Id. */
  int COMMA = 57;
  /** RegularExpression Id. */
  int QMARK = 58;
  /** RegularExpression Id. */
  int EQUAL = 59;
  /** RegularExpression Id. */
  int OBRACE = 60;
  /** RegularExpression Id. */
  int LESSTHAN = 61;
  /** RegularExpression Id. */
  int BOOL_FALSE = 62;
  /** RegularExpression Id. */
  int BOOL_TRUE = 63;
  /** RegularExpression Id. */
  int AU = 64;
  /** RegularExpression Id. */
  int EU = 65;
  /** RegularExpression Id. */
  int EG = 66;
  /** RegularExpression Id. */
  int EF = 67;
  /** RegularExpression Id. */
  int AG = 68;
  /** RegularExpression Id. */
  int AF = 69;
  /** RegularExpression Id. */
  int PG = 70;
  /** RegularExpression Id. */
  int PF = 71;
  /** RegularExpression Id. */
  int PU = 72;
  /** RegularExpression Id. */
  int PX = 73;
  /** RegularExpression Id. */
  int Pr = 74;
  /** RegularExpression Id. */
  int Ss = 75;
  /** RegularExpression Id. */
  int OSQUARE = 76;
  /** RegularExpression Id. */
  int CSQUARE = 77;
  /** RegularExpression Id. */
  int GREATERTHAN = 78;
  /** RegularExpression Id. */
  int CBRACE = 79;
  /** RegularExpression Id. */
  int DISABLE = 80;
  /** RegularExpression Id. */
  int INF = 81;
  /** RegularExpression Id. */
  int SYMBOL = 82;
  /** RegularExpression Id. */
  int ID = 83;
  /** RegularExpression Id. */
  int NUM = 84;
  /** RegularExpression Id. */
  int INTEGER = 85;
  /** RegularExpression Id. */
  int REAL = 86;
  /** RegularExpression Id. */
  int LETTER = 87;
  /** RegularExpression Id. */
  int DIGIT = 88;
  /** RegularExpression Id. */
  int PLUS = 89;
  /** RegularExpression Id. */
  int MINUS = 90;
  /** RegularExpression Id. */
  int OPAR = 91;
  /** RegularExpression Id. */
  int CPAR = 92;
  /** RegularExpression Id. */
  int MULT = 93;
  /** RegularExpression Id. */
  int MOD = 94;
  /** RegularExpression Id. */
  int POWER = 95;
  /** RegularExpression Id. */
  int NOT = 96;
  /** RegularExpression Id. */
  int DIV = 97;
  /** RegularExpression Id. */
  int AND = 98;
  /** RegularExpression Id. */
  int OR = 99;
  /** RegularExpression Id. */
  int GEQ = 100;
  /** RegularExpression Id. */
  int LEQ = 101;
  /** RegularExpression Id. */
  int SEMICOLON = 102;
  /** RegularExpression Id. */
  int UNKNOWN = 103;
  /** RegularExpression Id. */
  int COMMENTS = 109;
  /** RegularExpression Id. */
  int DELIM = 110;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\".\"",
    "<ATACS>",
    "<END>",
    "<INPUTS>",
    "<INIT_STATE>",
    "<DUMMYS>",
    "<FAILTRANS>",
    "<VARIABLES>",
    "<INTEGERS>",
    "<NONINPS>",
    "<KEEPS>",
    "<ABSTRACTS>",
    "<CONTINUOUS>",
    "<RATES>",
    "<INITRATES>",
    "<INITVALS>",
    "<INITINTS>",
    "<INVARIANTS>",
    "<ENABLINGS>",
    "<ASSIGNS>",
    "<TRANS_RATES>",
    "<RATE_ASSIGNS>",
    "<INT_ASSIGNS>",
    "<DELAY_ASSIGNS>",
    "<PRIORITY_ASSIGNS>",
    "<BOOL_ASSIGNS>",
    "<OUTPUTS>",
    "<INTERNAL>",
    "<GRAPH>",
    "<PROPERTY>",
    "<MARKING>",
    "<NAME>",
    "\"uniform\"",
    "\"normal\"",
    "\"exponential\"",
    "\"gamma\"",
    "\"lognormal\"",
    "\"chisq\"",
    "\"laplace\"",
    "\"cauchy\"",
    "\"rayleigh\"",
    "\"poisson\"",
    "\"binomial\"",
    "\"bernoulli\"",
    "\"NOT\"",
    "\"OR\"",
    "\"AND\"",
    "\"XOR\"",
    "\"INT\"",
    "\"BOOL\"",
    "\"BIT\"",
    "\"rate\"",
    "\"verify\"",
    "\"search\"",
    "\":=\"",
    "\"=>\"",
    "\",\"",
    "\"?\"",
    "\"=\"",
    "\"{\"",
    "\"<\"",
    "\"false\"",
    "\"true\"",
    "\"AU\"",
    "\"EU\"",
    "\"EG\"",
    "\"EF\"",
    "\"AG\"",
    "\"AF\"",
    "\"PG\"",
    "\"PF\"",
    "\"PU\"",
    "\"PX\"",
    "\"Pr\"",
    "\"St\"",
    "\"[\"",
    "\"]\"",
    "\">\"",
    "\"}\"",
    "\")d\"",
    "\"inf\"",
    "<SYMBOL>",
    "<ID>",
    "<NUM>",
    "<INTEGER>",
    "<REAL>",
    "<LETTER>",
    "<DIGIT>",
    "\"+\"",
    "\"-\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"%\"",
    "\"^\"",
    "\"~\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\">=\"",
    "\"<=\"",
    "\";\"",
    "\"\\\\\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<COMMENTS>",
    "<DELIM>",
  };

}
